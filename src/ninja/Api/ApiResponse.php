<?php

namespace ninja;

class ApiResponse extends \Response {

	/**
	 * I override parent to set content type json... maybe not such a great idea but works for now
	 * @todo move content-type setting to a requested extension dependent code and out of here
	 * @param ApiResponseModel $content
	 * @param int $status
	 * @param array $headers
	 */
	public function __construct($content = '', $status = 200, $headers = array()) {
		$headers['Content-type'] = 'application/json';
		parent::__construct($content, $status, $headers); // TODO: Change the autogenerated stub
	}

	public static function fromCollection($success, $result=null, $errors=null, $meta=null) {

		$ResponseModel = new \ApiResponseModel([
			'success' => $success,
			'result' => null,
			'errors' => $errors,
			'meta' => $meta,
		]);

		if (is_null($result));
		elseif (!$result instanceof \Collection) {
			throw new \BadMethodCallException();
		}
		else {
			$ResponseModel->result = array_values($result->flatData());
			$ResponseModel->count = $result->getCount();
			$ResponseModel->allCount = $result->getCount(true);
		}

		return  new \ApiResponse($ResponseModel);

	}

	/**
	 * I build an instance with given parameters
	 * @param bool $success
	 * @param mixed[]|Collection|Model $result
	 * @param ApiResponseErrorModel[] $errors
	 * @param mixed[] $meta
	 * @return \ApiResponse
	 */
	public static function from($success, $result=null, $errors=null, $meta=null) {

		$ResponseModel = new \ApiResponseModel([
			'success' => $success,
			'result' => $result,
		]);

		if (func_num_args() >= 3) {
			$ResponseModel->errors = $errors;
		}
		if (func_num_args() >= 4) {
			$ResponseModel->meta = $meta;
		}
		// @todo maybe here I could set a proper status code?
		$Response = new \ApiResponse($ResponseModel);
		return $Response;
	}

	/**
	 * I redefine setContent so it accepts only data in array
	 *
	 * @param mixed[] $content data, result of request
	 * @return ApiResponse
	 * @throws \UnexpectedValueException
	 */
	public function setContent($content)
	{
		if (!is_array($content) && (!$content instanceof \ApiResponseModel)) {
			throw new \UnexpectedValueException(sprintf('The Response content must be an array of values, "%s" given.', gettype($content)));
		}

		$this->content = $content;

		return $this;
	}

	/**
	 * I will send json encoded content
	 * @return Response|void
	 */
	public function sendContent() {
		echo json_encode($this->getContent()->Data()->flatData());
	}

}
